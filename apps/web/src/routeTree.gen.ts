/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as LandingIndexRouteImport } from './routes/_landing/index'
import { Route as DashboardAppIdRouteImport } from './routes/dashboard/$appId'
import { Route as LoginSignUpRouteImport } from './routes/_login/sign-up'
import { Route as LoginSignInRouteImport } from './routes/_login/sign-in'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const LandingIndexRoute = LandingIndexRouteImport.update({
  id: '/_landing/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardAppIdRoute = DashboardAppIdRouteImport.update({
  id: '/$appId',
  path: '/$appId',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const LoginSignUpRoute = LoginSignUpRouteImport.update({
  id: '/_login/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginSignInRoute = LoginSignInRouteImport.update({
  id: '/_login/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/sign-in': typeof LoginSignInRoute
  '/sign-up': typeof LoginSignUpRoute
  '/dashboard/$appId': typeof DashboardAppIdRoute
  '/': typeof LandingIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/sign-in': typeof LoginSignInRoute
  '/sign-up': typeof LoginSignUpRoute
  '/dashboard/$appId': typeof DashboardAppIdRoute
  '/': typeof LandingIndexRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/_login/sign-in': typeof LoginSignInRoute
  '/_login/sign-up': typeof LoginSignUpRoute
  '/dashboard/$appId': typeof DashboardAppIdRoute
  '/_landing/': typeof LandingIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/sign-in'
    | '/sign-up'
    | '/dashboard/$appId'
    | '/'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to: '/sign-in' | '/sign-up' | '/dashboard/$appId' | '/' | '/dashboard'
  id:
    | '__root__'
    | '/dashboard'
    | '/_login/sign-in'
    | '/_login/sign-up'
    | '/dashboard/$appId'
    | '/_landing/'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginSignInRoute: typeof LoginSignInRoute
  LoginSignUpRoute: typeof LoginSignUpRoute
  LandingIndexRoute: typeof LandingIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_landing/': {
      id: '/_landing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LandingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/$appId': {
      id: '/dashboard/$appId'
      path: '/$appId'
      fullPath: '/dashboard/$appId'
      preLoaderRoute: typeof DashboardAppIdRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_login/sign-up': {
      id: '/_login/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof LoginSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_login/sign-in': {
      id: '/_login/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof LoginSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardAppIdRoute: typeof DashboardAppIdRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardAppIdRoute: DashboardAppIdRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginSignInRoute: LoginSignInRoute,
  LoginSignUpRoute: LoginSignUpRoute,
  LandingIndexRoute: LandingIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
